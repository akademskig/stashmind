// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model ClerkUser {
  id                String    @id @default(cuid())
  clerkId           String    @unique
  email             String    @unique
  name              String?
  imageUrl          String?
  spaces   Space[]
  notes             Note[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Space {
  id          String    @id @default(cuid())
  name        String
  description String?
  purpose     SpacePurpose @default(GENERAL)
  owner       ClerkUser @relation(fields: [ownerId], references: [clerkId])
  ownerId     String
  notes       Note[]
  tags        Tag[]
  categories  Category[]
  settings    SpaceSettings?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([ownerId])
}

enum SpacePurpose {
  GENERAL      // For general note-taking
  LEARNING     // For courses, tutorials, learning projects
  READING      // For book notes, articles, papers
  RESEARCH     // For research projects and deep dives
  JOURNAL      // For personal reflections and thoughts
}

model Note {
  id                String    @id @default(cuid())
  title             String
  content           String    @db.Text
  contentType       ContentType @default(MARKDOWN)
  noteType          NoteType  @default(NOTE)
  summary           String?   @db.Text
  space    Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId  String
  author            ClerkUser @relation(fields: [authorId], references: [clerkId])
  authorId          String
  tags              TagsOnNotes[]
  category          Category? @relation(fields: [categoryId], references: [id])
  categoryId        String?
  aiMetadata        AINoteMetadata?
  memoryMetadata    MemoryMetadata?
  sourceUrl         String?
  isArchived        Boolean   @default(false)
  references        NoteReference[] @relation("ReferencingNotes")
  referencedBy      NoteReference[] @relation("ReferencedNotes")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([spaceId])
  @@index([authorId])
  @@index([categoryId])
}

enum ContentType {
  MARKDOWN
  RICH_TEXT
}

enum NoteType {
  NOTE          // General notes
  ARTICLE       // Article summaries and highlights
  QUOTE         // Interesting quotes and citations
  THOUGHT       // Personal thoughts and insights
  QUESTION      // Questions and uncertainties
}

model NoteReference {
  id              String    @id @default(cuid())
  fromNote        Note      @relation("ReferencingNotes", fields: [fromNoteId], references: [id], onDelete: Cascade)
  fromNoteId      String
  toNote          Note      @relation("ReferencedNotes", fields: [toNoteId], references: [id], onDelete: Cascade)
  toNoteId        String
  referenceType   ReferenceType @default(RELATED)
  description     String?
  createdAt       DateTime  @default(now())

  @@unique([fromNoteId, toNoteId])
  @@index([fromNoteId])
  @@index([toNoteId])
}

enum ReferenceType {
  RELATED        // General relationship
  SUPPORTS       // Supports or expands on the idea
  CONTRADICTS    // Presents opposing viewpoint
  QUESTIONS      // Raises questions about the idea
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId String
  notes       Note[]
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([spaceId, name])
  @@index([spaceId])
  @@index([parentId])
}

model Tag {
  id                String    @id @default(cuid())
  name              String
  color             String?
  space    Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId  String
  notes             TagsOnNotes[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([spaceId, name])
  @@index([spaceId])
}

model TagsOnNotes {
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId    String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     String
  createdAt DateTime @default(now())

  @@id([noteId, tagId])
  @@index([noteId])
  @@index([tagId])
}

model MemoryMetadata {
  id              String    @id @default(cuid())
  note            Note      @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId          String    @unique
  lastReviewed    DateTime?
  nextReviewDate  DateTime?
  reviewCount     Int       @default(0)
  difficulty      Int       @default(3) // 1-5 scale
  interval        Int       @default(1) // days
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([noteId])
  @@index([nextReviewDate])
}

model AINoteMetadata {
  id              String    @id @default(cuid())
  note            Note      @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId          String    @unique
  summary         String?   @db.Text
  keyPoints       String[]
  suggestedTags   String[]
  topics          String[]
  questions       String[]  // AI-generated review questions
  connections     Json?     // Suggested note connections
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([noteId])
}

model SpaceSettings {
  id                    String    @id @default(cuid())
  space        Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId      String    @unique
  defaultNoteType       NoteType  @default(NOTE)
  enableSpacedRepetition Boolean  @default(false)
  enableAIProcessing    Boolean   @default(true)
  reviewSchedule        Json?     // Flexible schedule configuration
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}